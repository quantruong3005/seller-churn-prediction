# STEP 1: MODEL SELECTION (Demo version)

import pandas as pd
from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from lightgbm import LGBMClassifier
from sklearn.datasets import make_classification

# --- Load dummy dataset ---
X, y = make_classification(
    n_samples=1000,
    n_features=10,
    n_informative=5,
    n_redundant=2,
    weights=[0.7, 0.3], # imbalanced dataset
    random_state=42
)

# --- CV strategy ---
cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)

# --- Logistic Regression pipeline & params ---
pipe_lr = Pipeline([
    ("scaler", StandardScaler()),
    ("lr", LogisticRegression(max_iter=1000))
])
param_lr = {
    "lr__C": [0.01, 0.1, 1, 10],
    "lr__penalty": ["l1", "l2"],
    "lr__solver": ["liblinear", "saga"],
    "lr__class_weight": [None, "balanced"]
}

# --- Random Forest params ---
rf = RandomForestClassifier(random_state=42)
param_rf = {
    "n_estimators": [200, 500],
    "max_depth": [5, 10, None],
    "max_features": ["sqrt", "log2"],
    "min_samples_split": [2, 5, 10],
    "min_samples_leaf": [1, 2, 5],
    "class_weight": [None, "balanced"]
}

# --- LightGBM params ---
lgbm = LGBMClassifier(random_state=42, verbose=-1)
param_lgbm = {
    "n_estimators": [200, 500],
    "learning_rate": [0.01, 0.05, 0.1],
    "num_leaves": [15, 31, 63],
    "max_depth": [-1, 5, 10],
    "min_child_samples": [20, 50, 100],
    "subsample": [0.7, 0.9, 1.0],
    "colsample_bytree": [0.7, 0.9, 1.0],
    "scale_pos_weight": [1, 5, 10]
}

# --- Models to test ---
models_params = [
    ("Logistic Regression", pipe_lr, param_lr),
    ("Random Forest", rf, param_rf),
    ("LightGBM", lgbm, param_lgbm)
]

# --- Run RandomizedSearchCV ---
for name, model, params in models_params:
    grid = RandomizedSearchCV(
        model, params, cv=cv, scoring="average_precision",
        n_iter=5, random_state=42, n_jobs=-1
    )
    grid.fit(X, y)

    print(f"{name} best PR AUC: {grid.best_score_:.3f}")
    print(f"Best params: {grid.best_params_}\n")
